#!/bin/bash

#SBATCH --account=d403-wt
#SBATCH --job-name=microbenchmark
#SBATCH --time=4:00:00
#SBATCH --nodes=1
#SBATCH --partition=gpu
#SBATCH --qos=gpu
#SBATCH --gres=gpu:1
#SBATCH --exclusive
#SBATCH --output=Monitor/%x_%j.out

benchmark=cpu_validate
testname="Func1Func2 Test"
branchname=cpu_validate
JOB_ID=$SLURM_JOB_ID
machine=cirrus
method=lin
num_samples=100
min_delaylength=20
max_delaylength=20000
innerreps=20
IDA=27
outer_repetitions=40
benchmark=cpuvalidate
compiler=nvc
remark1=None
remark2=None
remark3=None
remark4=None

export OMP_NUM_THREADS=1

module load gcc
module load intel-license
module load intel-20.4/cc
module load intel-20.4/fc
module load intel-20.4/compilers 
module load mpt
module load nvidia/nvhpc
module load openmpi/4.1.6
module load python

# Create a directory with the job ID
mkdir -p Raw_data/${machine}/${JOB_ID}
mkdir -p Plots/${machine}/${JOB_ID}
mkdir -p Scripts/${machine}
cat $0 > Scripts/${machine}/${JOB_ID}.job
mkdir -p Analysis/${machine}/${JOB_ID}
export MPLCONFIGDIR=/work/d35/d35/weiyu24/Microbenchmarking-of-Accelerators-Offloading/openmpbench_C_v40/Plots/${machine}

# Specify the path to your CSV file
csv_file="dataset.csv"

# Check if the file exists
if [ ! -f "$csv_file" ]; then
    headers="Test Name,Machine,Git Branch,JOB_ID,Compiler,Min_Delaylength,Max_Delaylength,Number_of_Samples,Spacing_Method,Benchmark,IDA,Remark_1,Remark_2,Remark_3,Remark_4"
    # "$machine,$testname,$JOB_ID,$compiler,$min_delaylength,$max_delaylength,$num_samples,$method,$benchmark,$IDA,$remark1,$remark2,$remark3,$remark4"
    echo "$headers" > "$csv_file"
    echo "CSV file '$csv_file' created with headers."
else
    echo "CSV file '$csv_file' already exists."
fi

for ((i=0; i<5;i++)); do
    # File to store results for the current IDA value
    output_file=Raw_data/${machine}/${JOB_ID}/${benchmark}_${IDA}_${i}.out
    # Clear previous data for this IDA, if any (to ensure fresh start for each IDA)
    : > $output_file

    # for delaylength in 20 4860 4880 4890 4900 4920 4940 4960 4980 5000; do
    for j in $(seq 0 $((num_samples-1))); do
        if [ "$method" == "linRe" ]; then delaylength=$(awk -v start=$min_delaylength -v end=$max_delaylength -v num=$num_samples -v j=$j 'BEGIN {print int(end - j * (end - start) / (num - 1))}')
        fi
        if [ "$method" == "lin" ]; then delaylength=$(awk -v start=$min_delaylength -v end=$max_delaylength -v num=$num_samples -v j=$j 'BEGIN {print int(start + j * (end - start) / (num - 1))}')
        fi
        if [ "$method" == "logRe" ];then delaylength=$(awk -v start=$min_delaylength -v end=$max_delaylength -v num=$num_samples -v j=$j 'BEGIN {print int(exp(log(end) - j * (log(end) - log(start)) / (num - 1)))}')
        fi
        if [ "$method" == "log" ];then delaylength=$(awk -v start=$min_delaylength -v end=$max_delaylength -v num=$num_samples -v j=$j 'BEGIN {print int(exp(log(start) + j * (log(end) - log(start)) / (num - 1)))}')
        fi

        echo "$benchmark_($IDA)_$delaylength_$innerreps"  # Just to ensure there is a newline at the end of the file, if needed
        echo "************************************************************************************************************************************************************************" >> $output_file
        # Direct the output of srun into the appropriate file in the raw_data directory
        srun $benchmark --outer-repetitions $outer_repetitions --delay-length $delaylength --inner-repetitions $innerreps >> $output_file
        
        echo ""  # Just to ensure there is a newline at the end of the file, if needed
    done
    # Save the script to the Script directory after each IDA loop iteration
    python visualise2.py "$benchmark" $output_file ${JOB_ID} ${IDA}_${i} ${machine}
done

for coe_file in Analysis/${machine}/${JOB_ID}/coe_*.txt;
do 
    data_file="${coe_file/coe/data}"
    python Analysis/analysis.py "$data_file" "$coe_file" ${JOB_ID} ${method} ${machine}
done

newline="$testname,$machine,$branchname,$JOB_ID,$compiler,$min_delaylength,$max_delaylength,$num_samples,$method,$benchmark,$IDA,$remark1,$remark2,$remark3,$remark4"
# Append the sentence to the CSV file
echo "$newline" >> "$csv_file"

